/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/parser/identify": {
    /** @description This operation identifies a sequence of APIs (up to a maximum of 3) based on the provided objective and context. For simple, single-purpose objectives, it typically returns one API. However, for more complex objectives that may seem simple but require multiple steps, it can return up to three APIs. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            user_id: components["schemas"]["user_id"];
            objective: components["schemas"]["objective"];
            context?: components["schemas"]["context"];
            /**
             * @description - `USER`: Searches among the user's authorized scopes and integrations.
             *
             *  -  `ALL`: Explores all set-up (by you) integrations, regardless of user authorization.
             * @default USER
             * @enum {string}
             */
            scope?: "USER" | "ALL";
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              job_id: components["schemas"]["job_id"];
            };
          };
        };
      };
    };
  };
  "/v1/parser/execute": {
    /** @description Execute API. This API executes the matching API for the given objective and context. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            user_id: components["schemas"]["user_id"];
            objective: components["schemas"]["objective"];
            context?: components["schemas"]["context"];
            /** @description The match object returned by the identify API */
            match: components["schemas"]["match"];
          };
        };
      };
      responses: {
        /** @description Job queued */
        200: {
          content: {
            "application/json": {
              job_id: components["schemas"]["job_id"];
            };
          };
        };
      };
    };
  };
  "/v1/parser/{job_id}/status": {
    /** @description Get the status of a job started by the identify or execute API */
    get: {
      parameters: {
        path: {
          job_id: components["schemas"]["job_id"];
        };
      };
      responses: {
        /** @description Successful retrieval of job status */
        200: {
          content: {
            "application/json": {
              /** @description The public id of the job */
              public_id: string;
              /**
               * @description The status of the job
               * @enum {string}
               */
              status: "created" | "success" | "failed";
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              finished_at?: string;
              result: components["schemas"]["parser_execute_result"] | components["schemas"]["parser_identify_result"] | components["schemas"]["parser_error_result"];
              /**
               * @description Type of job. May not be useful for external use
               * @enum {string}
               */
              name: "identify" | "execute";
              /** @description Credits used for this job */
              usage: number;
            };
          };
        };
      };
    };
  };
  "/v1/config": {
    /** @description Get Intervene public config */
    get: {
      responses: {
        /** @description Successful retrieval of config */
        200: {
          content: {
            "application/json": {
              /** @description The public key for Nango */
              nango_public_key: string;
            };
          };
        };
      };
    };
  };
  "/v1/integrations/{provider}/connections": {
    /** @description Get connection params */
    get: {
      parameters: {
        query: {
          user_id: components["schemas"]["user_id"];
        };
      };
      responses: {
        /** @description Successful retrieval of connection params */
        200: {
          content: {
            "application/json": {
              /** @description The provider config key for Nango */
              nango_provider_config_key: string;
              /** @description The connection id for Nango */
              nango_connection_id: string;
            };
          };
        };
      };
    };
  };
  "/v1/integrations/{provider}/connections/{user_id}/hmac_digest": {
    /** @description Get the HMAC digest for user authorization request. */
    get: operations["getHmacDigest"];
  };
  "/v1/integrations/{provider}/connections/{user_id}": {
    /** @description Get the connection status for a user and provider */
    get: {
      parameters: {
        path: {
          provider: components["schemas"]["provider"];
          user_id: components["schemas"]["user_id"];
        };
      };
      responses: {
        /** @description Successful retrieval of connection status */
        200: {
          content: {
            "application/json": {
              /** @description Indicates whether the user has authorized the provider */
              connected: boolean;
            };
          };
        };
      };
    };
    /** @description Terminate the connection between a user and a specific provider. This will revoke all access tokens for the user and provider. */
    delete: {
      parameters: {
        path: {
          provider: components["schemas"]["provider"];
          user_id: components["schemas"]["user_id"];
        };
      };
      responses: {
        /** @description Successfully disconnected */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "ok";
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The integration provider whose API is being called. Example: google, slack, github, etc. Find value of this in the Intervene dashboard. */
    provider: string;
    /** @description ID of the user on whose behalf to call the APIs */
    user_id: string;
    /** @description The objective for the API call. Generally, this is the user's prompt. It needs to be as atomic as possible. */
    objective: string;
    /** @description Any Additional structured data that may be useful for calling the API. */
    context: Record<string, never>;
    match: {
      /** @description The specific path of the API endpoint being called. */
      path: string;
      /**
       * @description The HTTP method used for the API call. This can be one of the following: 'get', 'put', 'post', 'delete', 'options', 'head', 'patch', 'trace'.
       * @enum {string}
       */
      httpMethod: "get" | "put" | "post" | "delete" | "options" | "head" | "patch" | "trace";
      /** @description A brief description of the API endpoint's functionality. */
      description: string;
      /** @description Indicates whether the user has granted authorization for this API. */
      authorized: boolean;
      /** @description A list of provider IDs that offer this API. Typically, this is a single-item array. */
      providers: string[];
      /** @description A unique identifier for this API. This can be used to construct the context object for subsequent API calls. */
      id: string;
      /** @description The ID of the API specification that matches the user's objective. This is primarily used by Intervene and may not be relevant for external use. */
      apiSpecId: string;
      /** @description A list of authorized scopes required for this API. Each scope is formatted as `<apiSpecId>:<original scope>`. */
      scopes: string[];
    };
    /** @description The job id returned by the identify or execute API. Use the [Job Status API](/rest/status) to get the status/result of the job. */
    job_id: string;
    /**
     * Execute API Result
     * @description The result of the execute job
     */
    parser_execute_result: {
      /** @description The URI of the API called */
      uri: string;
      /** @description The response body of the API call */
      body: string | Record<string, never>;
      /** @description The response code of the API call */
      code: number;
      /** @description The response headers of the API call */
      headers: Record<string, never>;
    };
    /**
     * Identify API Result
     * @description The result of the identify job
     */
    parser_identify_result: {
      /** @description Options for identified APIs. **Currently it only returns a single option** */
      matches: {
          0: components["schemas"]["match"];
        }[];
    };
    /**
     * Error
     * @description The result of the identify job
     */
    parser_error_result: {
      code: string;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Get the HMAC digest for user authorization request. */
  getHmacDigest: {
    parameters: {
      path: {
        provider: components["schemas"]["provider"];
        user_id: components["schemas"]["user_id"];
      };
    };
    responses: {
      /** @description Successful retrieval of HMAC digest */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
}
